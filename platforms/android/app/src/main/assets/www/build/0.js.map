{"version":3,"sources":["../../src/pages/add-technology/add-technology.module.ts","../../src/pages/add-technology/add-technology.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACK;AAUrD;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QARnC,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,0EAAiB;aAClB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,0EAAiB,CAAC;aAC5C;SACF,CAAC;OACW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACZM;AACgC;AACN;AACL;AAQ/D;IA4FE,4BAA4B;IAC5B,2BAAmB,OAA0B,EAC1B,IAAuB,EACvB,EAAsB,EACtB,EAAwB,EACxB,SAA4B;QAJ5B,YAAO,GAAP,OAAO,CAAmB;QAC1B,SAAI,GAAJ,IAAI,CAAmB;QACvB,OAAE,GAAF,EAAE,CAAoB;QACtB,OAAE,GAAF,EAAE,CAAsB;QACxB,cAAS,GAAT,SAAS,CAAmB;QA5D/C;;;;;WAKG;QACI,aAAQ,GAA2B,KAAK,CAAC;QAKhD;;;;;WAKG;QACI,aAAQ,GAA2B,KAAK,CAAC;QAgBhD;;;;;WAKG;QACI,aAAQ,GAA4B,IAAI,CAAC;QAKhD;;;;;WAKG;QACK,YAAO,GAA2B,qEAAqE,CAAC;QAa9G,uCAAuC;QACvC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC;YACnB,MAAM,EAAoB,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;YACnD,aAAa,EAAa,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;SACpD,CAAC,CAAC;IACL,CAAC;IAKD;;;;;;;;OAQG;IACH,4CAAgB,GAAhB;QAEE,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,EAAE,EAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CACzB,CAAC;YACC,IAAI,CAAC,QAAQ,GAAQ,IAAI,CAAC;YAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,SAAS,GAAO,aAAa,CAAC;QACrC,CAAC;QACD,IAAI,CACJ,CAAC;YACC,IAAI,CAAC,QAAQ,GAAQ,KAAK,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAO,cAAc,CAAC;QACtC,CAAC;IACH,CAAC;IAKD;;;;;;;;OAQG;IACH,uCAAW,GAAX,UAAY,IAAU;QAEpB,IAAI,CAAC,cAAc,GAAU,IAAI,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAgB,IAAI,CAAC,EAAE,CAAC;IACvC,CAAC;IAKD;;;;;;;;;OASG;IACH,uCAAW,GAAX,UAAY,IAAa,EAAE,WAAoB;QAA/C,iBAiBC;QAfC,IAAI,OAAO,GAAW,IAAI,yEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAC3E,OAAO,GAAW,EAAE,KAAK,EAAG,QAAQ,EAAE,MAAM,EAAG,IAAI,EAAE,aAAa,EAAG,WAAW,EAAE,EAClF,GAAG,GAAqB,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;aAClD,SAAS,CAAC,UAAC,IAAU;YAElB,gDAAgD;YAChD,KAAI,CAAC,QAAQ,GAAK,IAAI,CAAC;YACvB,KAAI,CAAC,gBAAgB,CAAC,qCAAmC,IAAI,4BAAyB,CAAC,CAAC;QAC1F,CAAC,EACD,UAAC,KAAW;YAEV,KAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACT,CAAC;IAKD;;;;;;;;;;OAUG;IACH,uCAAW,GAAX,UAAY,IAAa,EAAE,WAAoB;QAA/C,iBAkBC;QAhBC,IAAI,OAAO,GAAW,IAAI,yEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAC3E,OAAO,GAAW,EAAE,KAAK,EAAG,QAAQ,EAAE,MAAM,EAAG,IAAI,EAAE,aAAa,EAAG,WAAW,EAAE,UAAU,EAAG,IAAI,CAAC,QAAQ,EAAC,EAC7G,GAAG,GAAqB,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAE3D,IAAI,CAAC,IAAI;aACN,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;aAC3C,SAAS,CAAC,cAAI;YAEX,gDAAgD;YAChD,KAAI,CAAC,QAAQ,GAAK,IAAI,CAAC;YACvB,KAAI,CAAC,gBAAgB,CAAC,qCAAmC,IAAI,8BAA2B,CAAC,CAAC;QAC5F,CAAC,EACD,UAAC,KAAW;YAEV,KAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACT,CAAC;IAKD;;;;;;;;OAQG;IACH,uCAAW,GAAX;QAAA,iBAkBC;QAhBC,IAAI,IAAI,GAAkB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EACxD,OAAO,GAAW,IAAI,yEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EACzE,OAAO,GAAW,EAAE,KAAK,EAAG,QAAQ,EAAE,UAAU,EAAG,IAAI,CAAC,QAAQ,EAAC,EACjE,GAAG,GAAqB,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAE3D,IAAI,CAAC,IAAI;aACN,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;aAC3C,SAAS,CAAC,cAAI;YAEX,KAAI,CAAC,QAAQ,GAAO,IAAI,CAAC;YACzB,KAAI,CAAC,gBAAgB,CAAC,qCAAmC,IAAI,8BAA2B,CAAC,CAAC;QAC5F,CAAC,EACD,UAAC,KAAW;YAEV,KAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACT,CAAC;IAKD;;;;;;;;OAQG;IACH,qCAAS,GAAT;QAEE,IAAI,IAAI,GAAqB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAC3D,WAAW,GAAiB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;QAEtE,EAAE,EAAC,IAAI,CAAC,QAAQ,CAAC,CACjB,CAAC;YACC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACtC,CAAC;QACD,IAAI,CACJ,CAAC;YACC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAKD;;;;;;OAMG;IACH,uCAAW,GAAX;QAEE,IAAI,CAAC,cAAc,GAAa,EAAE,CAAC;QACnC,IAAI,CAAC,qBAAqB,GAAM,EAAE,CAAC;IACrC,CAAC;IAKD;;;;;;;OAOG;IACH,4CAAgB,GAAhB,UAAiB,OAAgB;QAE/B,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YACvC,OAAO,EAAS,OAAO;YACvB,QAAQ,EAAQ,IAAI;SACrB,CAAC,CAAC;QACH,YAAY,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IA1TU,iBAAiB;QAJ7B,wEAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;WACG;SACnC,CAAC;qFA8F6C;YACb,iEAAU;YACV,mEAAS;YACT,sEAAW;YACX,cAAe;OAjGpC,iBAAiB,CA8T7B;IAAD,CAAC;AAAA;SA9TY,iBAAiB,gB","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { AddTechnologyPage } from './add-technology';\n\n@NgModule({\n  declarations: [\n    AddTechnologyPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(AddTechnologyPage),\n  ],\n})\nexport class AddTechnologyPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/add-technology/add-technology.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, ToastController } from 'ionic-angular';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n\n@IonicPage()\n@Component({\n  selector: 'page-add-technology',\n  templateUrl: 'add-technology.html'\n})\nexport class AddTechnologyPage {\n\n\n\n  /**\n   * @name form\n   * @type {FormGroup}\n   * @public\n   * @description     Define FormGroup property for managing form validation / data retrieval\n   */\n  public form                   : FormGroup;\n\n\n\n\n  /**\n   * @name technologyName\n   * @type {Any}\n   * @public\n   * @description     Model for managing technologyName field\n   */\n  public technologyName         : any;\n\n\n\n\n  /**\n   * @name technologyDescription\n   * @type {Any}\n   * @public\n   * @description     Model for managing technologyDescription field\n   */\n  public technologyDescription  : any;\n\n\n\n\n  /**\n   * @name isEdited\n   * @type {Boolean}\n   * @public\n   * @description     Flag to be used for checking whether we are adding/editing an entry\n   */\n  public isEdited               : boolean = false;\n\n\n\n\n  /**\n   * @name hideForm\n   * @type {Boolean}\n   * @public\n   * @description     Flag to hide the form upon successful completion of remote operation\n   */\n  public hideForm               : boolean = false;\n\n\n\n\n  /**\n   * @name pageTitle\n   * @type {String}\n   * @public\n   * @description     Property to help set the page title\n   */\n  public pageTitle              : string;\n\n\n\n\n  /**\n   * @name recordID\n   * @type {String}\n   * @public\n   * @description     Property to store the recordID for when an existing entry is being edited\n   */\n  public recordID               : any      = null;\n\n\n\n\n  /**\n   * @name baseURI\n   * @type {String}\n   * @public\n   * @description     Remote URI for retrieving data from and sending data to\n   */\n  private baseURI               : string  = \"http://ec2-18-225-37-153.us-east-2.compute.amazonaws.com/resources/\";\n\n\n\n\n  // Initialise module classes\n  constructor(public navCtrl    : NavController,\n              public http       : HttpClient,\n              public NP         : NavParams,\n              public fb         : FormBuilder,\n              public toastCtrl  : ToastController)\n  {\n\n    // Create form builder validation rules\n    this.form = fb.group({\n      \"name\"                  : [\"\", Validators.required],\n      \"description\"           : [\"\", Validators.required]\n    });\n  }\n\n\n\n\n  /**\n   * Triggered when template view is about to be entered\n   * Determine whether we adding or editing a record\n   * based on any supplied navigation parameters\n   *\n   * @public\n   * @method ionViewWillEnter\n   * @return {None}\n   */\n  ionViewWillEnter() : void\n  {\n    this.resetFields();\n\n    if(this.NP.get(\"record\"))\n    {\n      this.isEdited      = true;\n      this.selectEntry(this.NP.get(\"record\"));\n      this.pageTitle     = 'Amend entry';\n    }\n    else\n    {\n      this.isEdited      = false;\n      this.pageTitle     = 'Create entry';\n    }\n  }\n\n\n\n\n  /**\n   * Assign the navigation retrieved data to properties\n   * used as models on the page's HTML form\n   *\n   * @public\n   * @method selectEntry\n   * @param item \t\t{any} \t\t\tNavigation data\n   * @return {None}\n   */\n  selectEntry(item : any) : void\n  {\n    this.technologyName        = item.name;\n    this.technologyDescription = item.description;\n    this.recordID              = item.id;\n  }\n\n\n\n\n  /**\n   * Save a new record that has been added to the page's HTML form\n   * Use angular's http post method to submit the record data\n   *\n   * @public\n   * @method createEntry\n   * @param name \t\t\t{String} \t\t\tName value from form field\n   * @param description \t{String} \t\t\tDescription value from form field\n   * @return {None}\n   */\n  createEntry(name : string, description : string) : void\n  {\n    let headers \t: any\t\t= new HttpHeaders({ 'Content-Type': 'application/json' }),\n      options \t: any\t\t= { \"key\" : \"create\", \"name\" : name, \"description\" : description },\n      url       : any      \t= this.baseURI + \"manage-data.php\";\n\n    this.http.post(url, JSON.stringify(options), headers)\n      .subscribe((data : any) =>\n        {\n          // If the request was successful notify the user\n          this.hideForm   = true;\n          this.sendNotification(`Congratulations the technology: ${name} was successfully added`);\n        },\n        (error : any) =>\n        {\n          this.sendNotification('Something went wrong!');\n        });\n  }\n\n\n\n\n  /**\n   * Update an existing record that has been edited in the page's HTML form\n   * Use angular's http post method to submit the record data\n   * to our remote PHP script\n   *\n   * @public\n   * @method updateEntry\n   * @param name \t\t\t{String} \t\t\tName value from form field\n   * @param description \t{String} \t\t\tDescription value from form field\n   * @return {None}\n   */\n  updateEntry(name : string, description : string) : void\n  {\n    let headers \t: any\t\t= new HttpHeaders({ 'Content-Type': 'application/json' }),\n      options \t: any\t\t= { \"key\" : \"update\", \"name\" : name, \"description\" : description, \"recordID\" : this.recordID},\n      url       : any      \t= this.baseURI + \"manage-data.php\";\n\n    this.http\n      .post(url, JSON.stringify(options), headers)\n      .subscribe(data =>\n        {\n          // If the request was successful notify the user\n          this.hideForm  =  true;\n          this.sendNotification(`Congratulations the technology: ${name} was successfully updated`);\n        },\n        (error : any) =>\n        {\n          this.sendNotification('Something went wrong!');\n        });\n  }\n\n\n\n\n  /**\n   * Remove an existing record that has been selected in the page's HTML form\n   * Use angular's http post method to submit the record data\n   * to our remote PHP script\n   *\n   * @public\n   * @method deleteEntry\n   * @return {None}\n   */\n  deleteEntry() : void\n  {\n    let name      : string \t= this.form.controls[\"name\"].value,\n      headers \t: any\t\t= new HttpHeaders({ 'Content-Type': 'application/json' }),\n      options \t: any\t\t= { \"key\" : \"delete\", \"recordID\" : this.recordID},\n      url       : any      \t= this.baseURI + \"manage-data.php\";\n\n    this.http\n      .post(url, JSON.stringify(options), headers)\n      .subscribe(data =>\n        {\n          this.hideForm     = true;\n          this.sendNotification(`Congratulations the technology: ${name} was successfully deleted`);\n        },\n        (error : any) =>\n        {\n          this.sendNotification('Something went wrong!');\n        });\n  }\n\n\n\n\n  /**\n   * Handle data submitted from the page's HTML form\n   * Determine whether we are adding a new record or amending an\n   * existing record\n   *\n   * @public\n   * @method saveEntry\n   * @return {None}\n   */\n  saveEntry() : void\n  {\n    let name          : string = this.form.controls[\"name\"].value,\n      description   : string    = this.form.controls[\"description\"].value;\n\n    if(this.isEdited)\n    {\n      this.updateEntry(name, description);\n    }\n    else\n    {\n      this.createEntry(name, description);\n    }\n  }\n\n\n\n\n  /**\n   * Clear values in the page's HTML form fields\n   *\n   * @public\n   * @method resetFields\n   * @return {None}\n   */\n  resetFields() : void\n  {\n    this.technologyName           = \"\";\n    this.technologyDescription    = \"\";\n  }\n\n\n\n\n  /**\n   * Manage notifying the user of the outcome of remote operations\n   *\n   * @public\n   * @method sendNotification\n   * @param message \t{String} \t\t\tMessage to be displayed in the notification\n   * @return {None}\n   */\n  sendNotification(message : string)  : void\n  {\n    let notification = this.toastCtrl.create({\n      message       : message,\n      duration      : 3000\n    });\n    notification.present();\n  }\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/add-technology/add-technology.ts"],"sourceRoot":""}